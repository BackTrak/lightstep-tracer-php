<?php
namespace CroutonThrift;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class KeyValue {
  static $_TSPEC;

  /**
   * @var string
   */
  public $Key = null;
  /**
   * @var string
   */
  public $Value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Key'])) {
        $this->Key = $vals['Key'];
      }
      if (isset($vals['Value'])) {
        $this->Value = $vals['Value'];
      }
    }
  }

  public function getName() {
    return 'KeyValue';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeyValue');
    if ($this->Key !== null) {
      $xfer += $output->writeFieldBegin('Key', TType::STRING, 1);
      $xfer += $output->writeString($this->Key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Value !== null) {
      $xfer += $output->writeFieldBegin('Value', TType::STRING, 2);
      $xfer += $output->writeString($this->Value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NamedCounter {
  static $_TSPEC;

  /**
   * @var string
   */
  public $Name = null;
  /**
   * @var int
   */
  public $Value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Value',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Name'])) {
        $this->Name = $vals['Name'];
      }
      if (isset($vals['Value'])) {
        $this->Value = $vals['Value'];
      }
    }
  }

  public function getName() {
    return 'NamedCounter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NamedCounter');
    if ($this->Name !== null) {
      $xfer += $output->writeFieldBegin('Name', TType::STRING, 1);
      $xfer += $output->writeString($this->Name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Value !== null) {
      $xfer += $output->writeFieldBegin('Value', TType::I64, 2);
      $xfer += $output->writeI64($this->Value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Runtime {
  static $_TSPEC;

  /**
   * @var string
   */
  public $guid = null;
  /**
   * @var int
   */
  public $start_micros = null;
  /**
   * @var string
   */
  public $group_name = null;
  /**
   * @var \CroutonThrift\KeyValue[]
   */
  public $attrs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start_micros',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'group_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'attrs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\KeyValue',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guid'])) {
        $this->guid = $vals['guid'];
      }
      if (isset($vals['start_micros'])) {
        $this->start_micros = $vals['start_micros'];
      }
      if (isset($vals['group_name'])) {
        $this->group_name = $vals['group_name'];
      }
      if (isset($vals['attrs'])) {
        $this->attrs = $vals['attrs'];
      }
    }
  }

  public function getName() {
    return 'Runtime';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->attrs = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \CroutonThrift\KeyValue();
              $xfer += $elem5->read($input);
              $this->attrs []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Runtime');
    if ($this->guid !== null) {
      $xfer += $output->writeFieldBegin('guid', TType::STRING, 1);
      $xfer += $output->writeString($this->guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_micros !== null) {
      $xfer += $output->writeFieldBegin('start_micros', TType::I64, 2);
      $xfer += $output->writeI64($this->start_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_name !== null) {
      $xfer += $output->writeFieldBegin('group_name', TType::STRING, 3);
      $xfer += $output->writeString($this->group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attrs !== null) {
      if (!is_array($this->attrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attrs', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->attrs));
        {
          foreach ($this->attrs as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LogRecord {
  static $_TSPEC;

  /**
   * @var int
   */
  public $timestamp_micros = null;
  /**
   * @var \CroutonThrift\KeyValue[]
   */
  public $fields = null;
  /**
   * @var string
   */
  public $runtime_guid = null;
  /**
   * @var string
   */
  public $span_guid = null;
  /**
   * @var string
   */
  public $stable_name = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var string
   */
  public $level = null;
  /**
   * @var int
   */
  public $thread_id = null;
  /**
   * @var string
   */
  public $filename = null;
  /**
   * @var int
   */
  public $line_number = null;
  /**
   * @var string[]
   */
  public $stack_frames = null;
  /**
   * @var string
   */
  public $payload_json = null;
  /**
   * @var bool
   */
  public $error_flag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp_micros',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'fields',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\KeyValue',
            ),
          ),
        2 => array(
          'var' => 'runtime_guid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'span_guid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'stable_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'level',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'thread_id',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'line_number',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'stack_frames',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'payload_json',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'error_flag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timestamp_micros'])) {
        $this->timestamp_micros = $vals['timestamp_micros'];
      }
      if (isset($vals['fields'])) {
        $this->fields = $vals['fields'];
      }
      if (isset($vals['runtime_guid'])) {
        $this->runtime_guid = $vals['runtime_guid'];
      }
      if (isset($vals['span_guid'])) {
        $this->span_guid = $vals['span_guid'];
      }
      if (isset($vals['stable_name'])) {
        $this->stable_name = $vals['stable_name'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['thread_id'])) {
        $this->thread_id = $vals['thread_id'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['line_number'])) {
        $this->line_number = $vals['line_number'];
      }
      if (isset($vals['stack_frames'])) {
        $this->stack_frames = $vals['stack_frames'];
      }
      if (isset($vals['payload_json'])) {
        $this->payload_json = $vals['payload_json'];
      }
      if (isset($vals['error_flag'])) {
        $this->error_flag = $vals['error_flag'];
      }
    }
  }

  public function getName() {
    return 'LogRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->fields = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \CroutonThrift\KeyValue();
              $xfer += $elem12->read($input);
              $this->fields []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->runtime_guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->span_guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stable_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->thread_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->line_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->stack_frames = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              $this->stack_frames []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payload_json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->error_flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LogRecord');
    if ($this->timestamp_micros !== null) {
      $xfer += $output->writeFieldBegin('timestamp_micros', TType::I64, 1);
      $xfer += $output->writeI64($this->timestamp_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->runtime_guid !== null) {
      $xfer += $output->writeFieldBegin('runtime_guid', TType::STRING, 2);
      $xfer += $output->writeString($this->runtime_guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->span_guid !== null) {
      $xfer += $output->writeFieldBegin('span_guid', TType::STRING, 3);
      $xfer += $output->writeString($this->span_guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stable_name !== null) {
      $xfer += $output->writeFieldBegin('stable_name', TType::STRING, 4);
      $xfer += $output->writeString($this->stable_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 5);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::STRING, 6);
      $xfer += $output->writeString($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thread_id !== null) {
      $xfer += $output->writeFieldBegin('thread_id', TType::I64, 7);
      $xfer += $output->writeI64($this->thread_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 8);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->line_number !== null) {
      $xfer += $output->writeFieldBegin('line_number', TType::I64, 9);
      $xfer += $output->writeI64($this->line_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stack_frames !== null) {
      if (!is_array($this->stack_frames)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stack_frames', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->stack_frames));
        {
          foreach ($this->stack_frames as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload_json !== null) {
      $xfer += $output->writeFieldBegin('payload_json', TType::STRING, 11);
      $xfer += $output->writeString($this->payload_json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_flag !== null) {
      $xfer += $output->writeFieldBegin('error_flag', TType::BOOL, 12);
      $xfer += $output->writeBool($this->error_flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fields !== null) {
      if (!is_array($this->fields)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fields', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->fields));
        {
          foreach ($this->fields as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TraceJoinId {
  static $_TSPEC;

  /**
   * @var string
   */
  public $TraceKey = null;
  /**
   * @var string
   */
  public $Value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TraceKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TraceKey'])) {
        $this->TraceKey = $vals['TraceKey'];
      }
      if (isset($vals['Value'])) {
        $this->Value = $vals['Value'];
      }
    }
  }

  public function getName() {
    return 'TraceJoinId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TraceKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TraceJoinId');
    if ($this->TraceKey !== null) {
      $xfer += $output->writeFieldBegin('TraceKey', TType::STRING, 1);
      $xfer += $output->writeString($this->TraceKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Value !== null) {
      $xfer += $output->writeFieldBegin('Value', TType::STRING, 2);
      $xfer += $output->writeString($this->Value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpanRecord {
  static $_TSPEC;

  /**
   * @var string
   */
  public $span_guid = null;
  /**
   * @var string
   */
  public $trace_guid = null;
  /**
   * @var string
   */
  public $runtime_guid = null;
  /**
   * @var string
   */
  public $span_name = null;
  /**
   * @var \CroutonThrift\TraceJoinId[]
   */
  public $join_ids = null;
  /**
   * @var int
   */
  public $oldest_micros = null;
  /**
   * @var int
   */
  public $youngest_micros = null;
  /**
   * @var \CroutonThrift\KeyValue[]
   */
  public $attributes = null;
  /**
   * @var bool
   */
  public $error_flag = null;
  /**
   * @var \CroutonThrift\LogRecord[]
   */
  public $log_records = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'span_guid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'trace_guid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'runtime_guid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'span_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'join_ids',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\TraceJoinId',
            ),
          ),
        5 => array(
          'var' => 'oldest_micros',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'youngest_micros',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'attributes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\KeyValue',
            ),
          ),
        9 => array(
          'var' => 'error_flag',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'log_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\LogRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['span_guid'])) {
        $this->span_guid = $vals['span_guid'];
      }
      if (isset($vals['trace_guid'])) {
        $this->trace_guid = $vals['trace_guid'];
      }
      if (isset($vals['runtime_guid'])) {
        $this->runtime_guid = $vals['runtime_guid'];
      }
      if (isset($vals['span_name'])) {
        $this->span_name = $vals['span_name'];
      }
      if (isset($vals['join_ids'])) {
        $this->join_ids = $vals['join_ids'];
      }
      if (isset($vals['oldest_micros'])) {
        $this->oldest_micros = $vals['oldest_micros'];
      }
      if (isset($vals['youngest_micros'])) {
        $this->youngest_micros = $vals['youngest_micros'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['error_flag'])) {
        $this->error_flag = $vals['error_flag'];
      }
      if (isset($vals['log_records'])) {
        $this->log_records = $vals['log_records'];
      }
    }
  }

  public function getName() {
    return 'SpanRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->span_guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->trace_guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->runtime_guid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->span_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->join_ids = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \CroutonThrift\TraceJoinId();
              $xfer += $elem26->read($input);
              $this->join_ids []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->oldest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->youngest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->attributes = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $elem32 = new \CroutonThrift\KeyValue();
              $xfer += $elem32->read($input);
              $this->attributes []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->error_flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->log_records = array();
            $_size33 = 0;
            $_etype36 = 0;
            $xfer += $input->readListBegin($_etype36, $_size33);
            for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
            {
              $elem38 = null;
              $elem38 = new \CroutonThrift\LogRecord();
              $xfer += $elem38->read($input);
              $this->log_records []= $elem38;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpanRecord');
    if ($this->span_guid !== null) {
      $xfer += $output->writeFieldBegin('span_guid', TType::STRING, 1);
      $xfer += $output->writeString($this->span_guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->runtime_guid !== null) {
      $xfer += $output->writeFieldBegin('runtime_guid', TType::STRING, 2);
      $xfer += $output->writeString($this->runtime_guid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->span_name !== null) {
      $xfer += $output->writeFieldBegin('span_name', TType::STRING, 3);
      $xfer += $output->writeString($this->span_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->join_ids !== null) {
      if (!is_array($this->join_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('join_ids', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->join_ids));
        {
          foreach ($this->join_ids as $iter39)
          {
            $xfer += $iter39->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oldest_micros !== null) {
      $xfer += $output->writeFieldBegin('oldest_micros', TType::I64, 5);
      $xfer += $output->writeI64($this->oldest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->youngest_micros !== null) {
      $xfer += $output->writeFieldBegin('youngest_micros', TType::I64, 6);
      $xfer += $output->writeI64($this->youngest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      if (!is_array($this->attributes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attributes', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->attributes));
        {
          foreach ($this->attributes as $iter40)
          {
            $xfer += $iter40->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_flag !== null) {
      $xfer += $output->writeFieldBegin('error_flag', TType::BOOL, 9);
      $xfer += $output->writeBool($this->error_flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->log_records !== null) {
      if (!is_array($this->log_records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('log_records', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->log_records));
        {
          foreach ($this->log_records as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->trace_guid !== null) {
      $xfer += $output->writeFieldBegin('trace_guid', TType::STRING, 11);
      $xfer += $output->writeString($this->trace_guid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Auth {
  static $_TSPEC;

  /**
   * @var string
   */
  public $access_token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'access_token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['access_token'])) {
        $this->access_token = $vals['access_token'];
      }
    }
  }

  public function getName() {
    return 'Auth';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->access_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Auth');
    if ($this->access_token !== null) {
      $xfer += $output->writeFieldBegin('access_token', TType::STRING, 1);
      $xfer += $output->writeString($this->access_token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Timing {
  static $_TSPEC;

  /**
   * @var int
   */
  public $receive_micros = null;
  /**
   * @var int
   */
  public $transmit_micros = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receive_micros',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'transmit_micros',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receive_micros'])) {
        $this->receive_micros = $vals['receive_micros'];
      }
      if (isset($vals['transmit_micros'])) {
        $this->transmit_micros = $vals['transmit_micros'];
      }
    }
  }

  public function getName() {
    return 'Timing';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receive_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->transmit_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Timing');
    if ($this->receive_micros !== null) {
      $xfer += $output->writeFieldBegin('receive_micros', TType::I64, 1);
      $xfer += $output->writeI64($this->receive_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transmit_micros !== null) {
      $xfer += $output->writeFieldBegin('transmit_micros', TType::I64, 2);
      $xfer += $output->writeI64($this->transmit_micros);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SampleCount {
  static $_TSPEC;

  /**
   * @var int
   */
  public $oldest_micros = null;
  /**
   * @var int
   */
  public $youngest_micros = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'oldest_micros',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'youngest_micros',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['oldest_micros'])) {
        $this->oldest_micros = $vals['oldest_micros'];
      }
      if (isset($vals['youngest_micros'])) {
        $this->youngest_micros = $vals['youngest_micros'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'SampleCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->oldest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->youngest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SampleCount');
    if ($this->oldest_micros !== null) {
      $xfer += $output->writeFieldBegin('oldest_micros', TType::I64, 1);
      $xfer += $output->writeI64($this->oldest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->youngest_micros !== null) {
      $xfer += $output->writeFieldBegin('youngest_micros', TType::I64, 2);
      $xfer += $output->writeI64($this->youngest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 3);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MetricsSample {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $int64_value = null;
  /**
   * @var double
   */
  public $double_value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'int64_value',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'double_value',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['int64_value'])) {
        $this->int64_value = $vals['int64_value'];
      }
      if (isset($vals['double_value'])) {
        $this->double_value = $vals['double_value'];
      }
    }
  }

  public function getName() {
    return 'MetricsSample';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->int64_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->double_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MetricsSample');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->int64_value !== null) {
      $xfer += $output->writeFieldBegin('int64_value', TType::I64, 2);
      $xfer += $output->writeI64($this->int64_value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->double_value !== null) {
      $xfer += $output->writeFieldBegin('double_value', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->double_value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Metrics {
  static $_TSPEC;

  /**
   * @var \CroutonThrift\MetricsSample[]
   */
  public $counts = null;
  /**
   * @var \CroutonThrift\MetricsSample[]
   */
  public $gauges = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'counts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\MetricsSample',
            ),
          ),
        2 => array(
          'var' => 'gauges',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\MetricsSample',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['counts'])) {
        $this->counts = $vals['counts'];
      }
      if (isset($vals['gauges'])) {
        $this->gauges = $vals['gauges'];
      }
    }
  }

  public function getName() {
    return 'Metrics';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->counts = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \CroutonThrift\MetricsSample();
              $xfer += $elem47->read($input);
              $this->counts []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->gauges = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $elem53 = new \CroutonThrift\MetricsSample();
              $xfer += $elem53->read($input);
              $this->gauges []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Metrics');
    if ($this->counts !== null) {
      if (!is_array($this->counts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('counts', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->counts));
        {
          foreach ($this->counts as $iter54)
          {
            $xfer += $iter54->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gauges !== null) {
      if (!is_array($this->gauges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gauges', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->gauges));
        {
          foreach ($this->gauges as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportRequest {
  static $_TSPEC;

  /**
   * @var \CroutonThrift\Runtime
   */
  public $runtime = null;
  /**
   * @var \CroutonThrift\SpanRecord[]
   */
  public $span_records = null;
  /**
   * @var \CroutonThrift\LogRecord[]
   */
  public $log_records = null;
  /**
   * @var int
   */
  public $timestamp_offset_micros = null;
  /**
   * @var int
   */
  public $oldest_micros = null;
  /**
   * @var int
   */
  public $youngest_micros = null;
  /**
   * @var \CroutonThrift\NamedCounter[]
   */
  public $counters = null;
  /**
   * @var \CroutonThrift\LogRecord[]
   */
  public $internal_logs = null;
  /**
   * @var \CroutonThrift\Metrics
   */
  public $internal_metrics = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runtime',
          'type' => TType::STRUCT,
          'class' => '\CroutonThrift\Runtime',
          ),
        3 => array(
          'var' => 'span_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\SpanRecord',
            ),
          ),
        4 => array(
          'var' => 'log_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\LogRecord',
            ),
          ),
        5 => array(
          'var' => 'timestamp_offset_micros',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'oldest_micros',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'youngest_micros',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'counters',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\NamedCounter',
            ),
          ),
        10 => array(
          'var' => 'internal_logs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\LogRecord',
            ),
          ),
        11 => array(
          'var' => 'internal_metrics',
          'type' => TType::STRUCT,
          'class' => '\CroutonThrift\Metrics',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runtime'])) {
        $this->runtime = $vals['runtime'];
      }
      if (isset($vals['span_records'])) {
        $this->span_records = $vals['span_records'];
      }
      if (isset($vals['log_records'])) {
        $this->log_records = $vals['log_records'];
      }
      if (isset($vals['timestamp_offset_micros'])) {
        $this->timestamp_offset_micros = $vals['timestamp_offset_micros'];
      }
      if (isset($vals['oldest_micros'])) {
        $this->oldest_micros = $vals['oldest_micros'];
      }
      if (isset($vals['youngest_micros'])) {
        $this->youngest_micros = $vals['youngest_micros'];
      }
      if (isset($vals['counters'])) {
        $this->counters = $vals['counters'];
      }
      if (isset($vals['internal_logs'])) {
        $this->internal_logs = $vals['internal_logs'];
      }
      if (isset($vals['internal_metrics'])) {
        $this->internal_metrics = $vals['internal_metrics'];
      }
    }
  }

  public function getName() {
    return 'ReportRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->runtime = new \CroutonThrift\Runtime();
            $xfer += $this->runtime->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->span_records = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \CroutonThrift\SpanRecord();
              $xfer += $elem61->read($input);
              $this->span_records []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->log_records = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $elem67 = new \CroutonThrift\LogRecord();
              $xfer += $elem67->read($input);
              $this->log_records []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp_offset_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->oldest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->youngest_micros);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->counters = array();
            $_size68 = 0;
            $_etype71 = 0;
            $xfer += $input->readListBegin($_etype71, $_size68);
            for ($_i72 = 0; $_i72 < $_size68; ++$_i72)
            {
              $elem73 = null;
              $elem73 = new \CroutonThrift\NamedCounter();
              $xfer += $elem73->read($input);
              $this->counters []= $elem73;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->internal_logs = array();
            $_size74 = 0;
            $_etype77 = 0;
            $xfer += $input->readListBegin($_etype77, $_size74);
            for ($_i78 = 0; $_i78 < $_size74; ++$_i78)
            {
              $elem79 = null;
              $elem79 = new \CroutonThrift\LogRecord();
              $xfer += $elem79->read($input);
              $this->internal_logs []= $elem79;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->internal_metrics = new \CroutonThrift\Metrics();
            $xfer += $this->internal_metrics->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportRequest');
    if ($this->runtime !== null) {
      if (!is_object($this->runtime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('runtime', TType::STRUCT, 1);
      $xfer += $this->runtime->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->span_records !== null) {
      if (!is_array($this->span_records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('span_records', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->span_records));
        {
          foreach ($this->span_records as $iter80)
          {
            $xfer += $iter80->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->log_records !== null) {
      if (!is_array($this->log_records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('log_records', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->log_records));
        {
          foreach ($this->log_records as $iter81)
          {
            $xfer += $iter81->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp_offset_micros !== null) {
      $xfer += $output->writeFieldBegin('timestamp_offset_micros', TType::I64, 5);
      $xfer += $output->writeI64($this->timestamp_offset_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oldest_micros !== null) {
      $xfer += $output->writeFieldBegin('oldest_micros', TType::I64, 7);
      $xfer += $output->writeI64($this->oldest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->youngest_micros !== null) {
      $xfer += $output->writeFieldBegin('youngest_micros', TType::I64, 8);
      $xfer += $output->writeI64($this->youngest_micros);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->counters !== null) {
      if (!is_array($this->counters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('counters', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->counters));
        {
          foreach ($this->counters as $iter82)
          {
            $xfer += $iter82->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->internal_logs !== null) {
      if (!is_array($this->internal_logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('internal_logs', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->internal_logs));
        {
          foreach ($this->internal_logs as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->internal_metrics !== null) {
      if (!is_object($this->internal_metrics)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('internal_metrics', TType::STRUCT, 11);
      $xfer += $this->internal_metrics->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Command {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $disable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'disable',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['disable'])) {
        $this->disable = $vals['disable'];
      }
    }
  }

  public function getName() {
    return 'Command';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->disable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Command');
    if ($this->disable !== null) {
      $xfer += $output->writeFieldBegin('disable', TType::BOOL, 1);
      $xfer += $output->writeBool($this->disable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportResponse {
  static $_TSPEC;

  /**
   * @var \CroutonThrift\Command[]
   */
  public $commands = null;
  /**
   * @var \CroutonThrift\Timing
   */
  public $timing = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commands',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CroutonThrift\Command',
            ),
          ),
        2 => array(
          'var' => 'timing',
          'type' => TType::STRUCT,
          'class' => '\CroutonThrift\Timing',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commands'])) {
        $this->commands = $vals['commands'];
      }
      if (isset($vals['timing'])) {
        $this->timing = $vals['timing'];
      }
    }
  }

  public function getName() {
    return 'ReportResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->commands = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new \CroutonThrift\Command();
              $xfer += $elem89->read($input);
              $this->commands []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->timing = new \CroutonThrift\Timing();
            $xfer += $this->timing->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportResponse');
    if ($this->commands !== null) {
      if (!is_array($this->commands)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commands', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->commands));
        {
          foreach ($this->commands as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timing !== null) {
      if (!is_object($this->timing)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timing', TType::STRUCT, 2);
      $xfer += $this->timing->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


